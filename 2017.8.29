模板方法模式
  1.模板方法就是一个抽象父类为他的多个子类封装一套算法逻辑（一个方法），这个方法需要声明为final，不允许子类去修改，子类最后都会调用这个方法，
  这个方法的特点是调用类中的一些其他方法，其他的方法包括普通方法和抽象方法，普通方法的意义在于为子类实现统一的逻辑，而抽象方法的意义的让子类
  分别实现自己的逻辑，调用时普通方法调用的都是抽象父类的方法，是一致的，而抽象方不同子类调用的则是自己的方法，其中这个抽象父类的作用就表现出来了，
  为子类封装一套算法逻辑，其中相同的部分父类自己实现，不同的部分则由子类自己实现。这样就让所有子类实现一套逻辑的条件下复用了代码。抽象父类的特点
  就是为子类提供约束的同时也可以提供相同的部分代码。
  模板方法抽象类的另外一个地方是里面可以实现一些钩子函数，函数中实现一些默认的逻辑，然后子类可以实现这个钩子函数，可以用于对父类提供的算法框架
  进行一定的扩展应用。
  
  例子
  冲饮料（抽象父类）
  算法框架：冲饮料4个步骤
  2个具体实现，2个让子类实现
  1个钩子函数
  
  茶类继承冲饮料类
  实现两个抽象方法
  实现一个钩子函数
  
  咖啡继承冲饮料类
  实现两个抽象方法
  
  测试类直接new茶or咖啡
  然后调用抽象父类提供的算法框架即可。
  
  2.适配器模式
  适配器模式的作用就是让一个类的接口转换成另外一个接口，这样可以实现代码的复用，不需要再重新写接口的实现，典型的例子就是二项转三项插头。
  首先适配器模式的客户端是存有一个目标接口的变量的，在初始化对象时给这个变量赋值，然后调用的方法也是调用这个目标接口的具体对象的具体方法，
  但是现在我们的被适配者并没有实现这个目标接口，这就需要一个转换器类（可以使用抽象类，用于多个适配器的扩展），然后转换器类中也存有一个被适配者
  的变量，在转换器初始化时设置这个变量，然后实现目标接口的方法，调用时调用的就是被适配者的方法。
  第二种实现适配器的方式是让适配器类直接实现目标接口，就有了目标接口的方法，同时继承被适配者类，这样就保证了适配器中可用调用被适配者的方法，
  但是这种继承实现适配器模式有一个缺点，也就是java中是无法实现多继承的，所以有局限性，因为每个适配器只能继承一个被适配者，所以无法实现为多个
  被适配者实现适配。
